C++语言学习
==========

变量和基本类型
-------------

C++支持两种初始化变量的形式: *复制初始化*(copy-initialization)和*直接初始化*(direct-initialization)。复制初始化语法用等号(=)，直接初始化则是把初始化式放在括号中:

		int ival(1024);		// direct-initialization
		int ival = 1024;		// copy-initialization

初始化内置类型的对象只有一种方法: 提供一个值，并且把这个值复制到新定义的对象中。对内置对象来说，复制初始化和直接初始化几乎没有差别。

**变量初始化规则**

当定义没有初始化式的变量时，系统有时候会帮我们初始化变量。这时，系统提供什么样的值取决于变量的类型，也取决于变量定义的位置。

- 内置类型变量的初始化

内置类型变量是否自动初始化取决于变量定义的位置。在函数体外定义的变量都初始化成0，在函数体里定义的内置类型变量不进行自动初始化。除了用作赋值操作符的左操作数，未初始化变量用作任何其他用途都是没有定义的。

- 类类型变量的初始化

每个类都定义了该类型的对象可以怎样初始化。类通过定义一个或多个构造函数来控制类对象的初始化。

如果定义某个类的变量时没有提供初始化式，这个类也可以定义初始化时的操作。它是通过定义一个特殊的构造函数即**默认构造函数**(default constructor)来实现的。

**声明和定义**

变量的**定义**(definition)用于为变量分配存储空间，还可以为变量指定初始值。在一个程序中，变量的定义有且仅有一个定义。

**声明**(declaration)用于向程序表明变量的类型和名字。定义也是声明: 当定义变量时我们声明了它的类型和名字。可以通过使用extern关键字声明变量而不定义它。不定义变量的声明包括对象名，对象类型和对象类型前的关键字extern:

		extern int i;		// declares but does not define i
		int i;				// declares and defines i

extern声明不是定义，也不分配存储空间。事实上，它只是说明变量定义在程序的其他地方。程序中变量可以声明多次，但只能定义一次。

*如果声明有初始化式，那么它可被当作是定义，即使声明标记为extern：

		extern double pi = 3.1416;		// definition

只有当extern声明位于函数外部时，才可以含有初始化式。

其他
----

- endl是一个特殊值，称为**操纵符(manipulator)**，将它写入输出流时，具有输出换行的效果，并刷新与设备相关联的缓冲区。通过刷新缓冲区，用户可立即看到写入到流中的输出。

- *在写C++程序时，大部分出现空格符的地方可用换行符代替。这条规则的一个例外是字符串字面值中的空格符不能用换行符代替。另一个例外是空格符不允许出现在预处理指示中。*
- 读入未知数目的输入:

		#include <iostream>
		using namespace std;
		
		int main()
		{
			int sum = 0, value;
			// read till end-of-file, calculating a running total of all values read
			while(cin >> value)
				sum += value;

			cout << "Sum is: " << sum << endl;

			return 0;
		}


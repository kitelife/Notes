Python正则表达式
=================

Python自1.5版本起增加了re模块，提供Perl风格的正则表达式模式。Python 1.5之前的版本则是通过regex模块提供Emacs风格的模式。

就其本质而言，正则表达式是一种小型的，高度专业化的编程语言。

正则表达式模式被编译成一系列的字节码，然后由C编写的匹配引擎执行。正则表达式语言相对小型和受限(功能有限)，因此并非所有字符串处理都能用正则表达式完成。当然也有些任务可以用正则表达式完成，不过最终表达式会变得异常复杂。

简单模式
---------

字符匹配
^^^^^^^^^

大多数字母和字符一般都会和自身匹配。例如，正则表达式test会和字符串"test"完全匹配。(你也可以使用大小写不敏感模式，从而让这个RE匹配"Test"或"TEST")。

这个规则当然会有例外：有些字符比较特殊，它们和自身并不匹配，而是表明应和一些特殊的东西匹配，或者它们会影响到RE其他部分的重复次数。

元字符完整列表:

::

    .^$*+?{[]\|()

- [] : 常用来指定一个字符类别，所谓字符类别就是你想匹配的一个字符集。字符可以单个列出，也可以用"-"符号分隔的两个给定字符来表示一个字符区间。例如，[abc]将匹配"a","b","c"中的任意一个字符；也可以用区间[a-c]来表示同一字符集，和前者效果一致。如果你只想匹配小写字母，那么RE应写成[a-z]。

元字符在类别里并不起作用。例如，[akm$]将匹配字符"a","k","m"或"$"中的任意一个。"$"通常用作元字符，但在字符类别里，其特性被除去，恢复成普通字符。

- ^ : 你可以用补集来匹配不在区间范围内的字符。其做法是把"^"作为类别的首个字符；其他地方的"^"只会简单匹配"^"符号本身。例如，[^5]将匹配除"5"之外的任意字符。

- \ : 也许最重要的元字符是反斜杠"\"。作为Python中的字符串字母，反斜杠后面可以加不同的字符以表示不同特殊意义。它也可以用于取消所有元字符，这样你就可以在模式中匹配它们了。

一些用"\"开始的特殊字符所表示的预定义字符集通常是很有用的，像数字集，字母集，或其他非空字符集。下列是可用的预设特殊字符:

::

    \d 匹配任何十进制数：相当于类[0-9]
    \D 匹配任何非数字字符：相当于类[^0-9]
    \s 匹配任何空白字符：相当于类[\t\n\r\f\v]
    \S 匹配任何非空白字符：相当于类[^\t\n\t\f\v]
    \w 匹配任何字母数字字符：相当于类[a-zA-Z0-9]
    \W 匹配任何非字母数字字符：相当于类[^a-zA-Z0-9]

这样，特殊字符都可以包含在一个字符类中。如，[\s,.]字符类将匹配任何空白字符或","或"."。

- . : 匹配除了换行符外的任何字符，在alternate模式(re.DOTALL)下它甚至可以匹配换行。"."通常被用于你想匹配任何字符的地方。

重复
^^^^^
